# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['print', 'sp', 'model', 'cli', 'ss', 'action_sp', 'chat', 'ssa', 'get_pane_output', 'get_pane_outputs', 'get_history',
           'run_cmd', 'main']

# %% ../nbs/00_core.ipynb 3
import os
from .ollama_client import OllamaClient, OllamaChat
from fastcore.script import *
from fastcore.utils import *
import requests
from functools import partial
from rich.console import Console
from rich.markdown import Markdown

import subprocess,sys
from subprocess import check_output as co

# %% ../nbs/00_core.ipynb 4
print = Console().print

# %% ../nbs/00_core.ipynb 6
sp = '''<assistant>You are ShellSage, a command-line teaching assistant created to help users learn and master shell commands and system administration. Your knowledge is current as of April 2024.</assistant>

<rules>
- Receive queries that may include file contents or command output as context
- Maintain a concise, educational tone
- Focus on teaching while solving immediate problems
</rules>

<response_format>
1. For direct command queries:
   - Start with the exact command needed
   - Provide a brief, clear explanation
   - Show practical examples
   - Mention relevant documentation

2. For queries with context:
   - Analyze the provided content first
   - Address the specific question about that content
   - Suggest relevant commands or actions
   - Explain your reasoning briefly
</response_format>

<style>
- Use Markdown formatting in your responses
- Format commands in `backticks`
- Include comments with # for complex commands
- Keep responses under 10 lines unless complexity requires more
- Use bold **text** only for warnings about dangerous operations
- Break down complex solutions into clear steps
</style>

<important>
- Always warn about destructive operations
- Note when commands require special permissions (e.g., sudo)
- Link to documentation with `man command_name` or `-h`/`--help`
</important>'''

# %% ../nbs/00_core.ipynb 7
model = os.environ.get("OLLAMA_MODEL", "qwen2.5-coder-ctx131072:7b")  # Can be overridden with OLLAMA_MODEL env var
try:
    # Test connection to Ollama
    requests.get("http://localhost:11434/api/tags").raise_for_status()
    cli = OllamaClient(model)
    ss = partial(cli, sp=sp)
except requests.exceptions.ConnectionError:
    print("Error: Cannot connect to Ollama. Please ensure Ollama is running with: 'ollama serve'")
    sys.exit(1)
except requests.exceptions.HTTPError as e:
    print(f"Error connecting to Ollama: HTTP {e.response.status_code} - {e.response.text}")
    sys.exit(1)

# %% ../nbs/00_core.ipynb 8
action_sp = '''<assistant>You are ShellSage in Action Mode - an automated command execution assistant. You create and execute plans for bash commands and system administration tasks.</assistant>

<rules>
- Always start with a clear plan overview
- Proceed step-by-step, waiting for confirmation
- Analyze command outputs before proceeding
- Maximum 3 retry attempts per step
- Track successful commands for final script generation
</rules>

<response_format>
1. Initial Plan Response:
   ```
   Plan: <brief overview>
   Steps:
   1. <step description>
      Command: `<command>`
   2. ...
   ```

2. Per-Step Response:
   ```
   Step N: description of the step and any warnings that could happen if ran
   Command: `<command>`
   ```

3. Error Response:
   ```
   Error Analysis: description of what went wrong and suggestion for how to fix
   Command: `<modified command>`
   ```
</response_format>

<important>
- Never execute destructive commands without explicit warning
- Always validate paths and resources exist before operations
- In dry-run mode, prefix explanations with "SIMULATION: "
- Track successful commands for final script generation
- Always using use markdown for your response
- Stick to the above format. Do not include any additional text such as asking the user to proceed
</important>'''

# %% ../nbs/00_core.ipynb 9
chat = OllamaChat(model, sp=action_sp)
ssa = chat.toolloop

# %% ../nbs/00_core.ipynb 11
def get_pane_output(n, pane_id=None):
    "Get output from a tmux pane"
    cmd = ['tmux', 'capture-pane', '-p', '-S', f'-{n}']
    if pane_id: cmd += ['-t', pane_id]
    return co(cmd, text=True)

# %% ../nbs/00_core.ipynb 12
def get_pane_outputs(n):
    current_id = co(['tmux', 'display-message', '-p', '#{pane_id}'], text=True).strip()
    pane_ids = [p for p in co(['tmux', 'list-panes', '-F', '#{pane_id}'], text=True).splitlines()]        
    return '\n'.join(f"<pane id={p} {'active' if p==current_id else ''}>{get_pane_output(n, p)}</pane>" for p in pane_ids)        

# %% ../nbs/00_core.ipynb 13
def get_history(n, pane_id='current' # Current, All or pane ID
               ):
    try:
        if pane_id=='current': return get_pane_output(n)
        if pane_id=='all': return get_pane_outputs(n)
        return get_pane_output(n, pane_id)
            
    except subprocess.CalledProcessError: return None

# %% ../nbs/00_core.ipynb 14
def run_cmd(
    desc:str, # description of 
    cmd:str,  # the command to run
    ):
    "Bash command to be ran with the description of why it will be ran and what it will do"
    
    print(f"\nStep: {desc}")
    print(f"Command: `{cmd}`")
    if input("Proceed? (y/n): ").lower() == 'y':
        return subprocess.run(cmd, shell=True, text=True, capture_output=True)

# %% ../nbs/00_core.ipynb 15
@call_parse
def main(
    query: Param('The query to send to the LLM', str, nargs='+'),
    pid: str = 'current', # `current`, `all` or tmux pane_id for context
    action: bool = False, # Run ShellSage in action mode
    NH: bool = False, # Don't include terminal history
    n: int = 200, # Number of history lines
    code_theme: str = 'monokai', # The code theme to use when rendering ShellSage's responses
    code_lexer: str = 'python', # The lexer to use for inline code markdown blocks
):  
    md = partial(Markdown, code_theme=code_theme, inline_code_lexer=code_lexer, inline_code_theme=code_theme)
    query = ' '.join(query)
    ctxt = ''
    # Get tmux history if requested and available

    if not NH:
        history = get_history(n,pid)
        if history: ctxt += f'<terminal_history>\n{history}\n</terminal_history>'

    # Read from stdin if available
    if not sys.stdin.isatty(): ctxt += f'\n<context>\n{sys.stdin.read()}</context>'
    
    query = f'{ctxt}\n<query>\n{query}\n</query>'
    if action:
        print(md(chat(query)))
        chat.tools = [run_cmd]
        print(md(ssa('proceed')))
    else: print(md(ss(query)))
